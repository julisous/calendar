{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport * as allIcons from \"@ant-design/icons/es/icons\";\nimport AntdIcon, { createFromIconfontCN, getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\nimport { withThemeSuffix, removeTypeTheme, getThemeFromTypeName, alias } from './utils';\nimport warning from '../_util/warning';\nimport upgradeMessage from '../_util/upgradeMessage';\nvar iconsMap = allIcons;\n\nvar LegacyTypeIcon = function LegacyTypeIcon(props) {\n  var type = props.type,\n      theme = props.theme;\n\n  if (theme) {\n    var themeInName = getThemeFromTypeName(type);\n    warning(!themeInName || theme === themeInName, 'Icon', \"The icon name '\".concat(type, \"' already specify a theme '\").concat(themeInName, \"',\") + \" the 'theme' prop '\".concat(theme, \"' will be ignored.\"));\n  }\n\n  var computedType = withThemeSuffix(removeTypeTheme(alias(type)), theme || 'outlined');\n  var targetIconComponent = iconsMap[computedType];\n  warning(targetIconComponent, 'Icon', \"The icon name '\".concat(type, \"'\").concat(theme ? \"with \".concat(theme) : '', \" doesn't exist, please check it at https://ant.design/components/icon\"));\n  return targetIconComponent ? /*#__PURE__*/React.createElement(targetIconComponent, props) : null;\n};\n\nvar Icon = function Icon(props) {\n  var type = props.type,\n      component = props.component,\n      children = props.children;\n  upgradeMessage('Icon');\n  warning(Boolean(type || component || children), 'Icon', 'Should have `type` prop or `component` prop or `children`.');\n\n  if (component || children) {\n    return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread({}, props));\n  }\n\n  if (typeof type === 'string') {\n    return /*#__PURE__*/React.createElement(LegacyTypeIcon, _objectSpread(_objectSpread({}, props), {}, {\n      type: type\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(AntdIcon, null);\n};\n\nIcon.createFromIconfontCN = createFromIconfontCN;\nIcon.getTwoToneColor = getTwoToneColor;\nIcon.setTwoToneColor = setTwoToneColor;\nexport default Icon;","map":null,"metadata":{},"sourceType":"module"}